package service;

import entities.Equipe;
import entities.User;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class ServiceEquipe implements IServiceEquipe<Equipe> {

    PreparedStatement prepare;
    Connection connection;
    private static ServiceEquipe instance;
    PreparedStatement preparedStatement;

    public ServiceEquipe() {
        connection = esprit.project.tools.MyDB.getInsatnce().getConnection();

    }

    public static ServiceEquipe getInstance() {
        if (instance == null) {
            instance = new ServiceEquipe();
        }
        return instance;
    }


    @Override
    public void ajouter(Equipe av) throws SQLException {
        String req = "INSERT INTO equipe ( nom, image, dateCreation) VALUES (?, ?, ?)";
        PreparedStatement ps = connection.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);

        ps.setString(1, av.getNom());
        ps.setString(2, av.getImage());
        ps.setDate(3, new java.sql.Date(av.getDateCreation().getTime()));  // Assuming dateCreation is a java.util.Date

        ps.executeUpdate();

        ResultSet generatedKeys = ps.getGeneratedKeys();
        if (generatedKeys.next()) {
            int autoGeneratedID = generatedKeys.getInt(1);
            av.setId(autoGeneratedID);
        }
    }


    @Override
    public void modifier(int id, Equipe equipeModifie) throws SQLException {
        String req = "UPDATE equipe SET nom=?, image=? WHERE id=?";
        PreparedStatement ps = connection.prepareStatement(req);

        ps.setString(1, equipeModifie.getNom());
        ps.setString(2, equipeModifie.getImage());
        ps.setInt(3, id);

        ps.executeUpdate();
    }

    @Override
    public void supprimer(int id) throws SQLException {
        String req = "DELETE FROM equipe WHERE id=?";
        PreparedStatement ps = connection.prepareStatement(req);

        ps.setInt(1, id);

        ps.executeUpdate();
    }

    @Override
    public void affecter(Equipe equipe, User user) throws SQLException {
        String sql="UPDATE user SET id_equipe=? where id=?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, equipe.getId());  // Set equipe_id
            preparedStatement.setInt(2, user.getId());    // Set user ids

            preparedStatement.executeUpdate();
    }

    @Override
    public List<Equipe> recuperer() throws SQLException {
        List<Equipe> equipeList = new ArrayList<>();

        String req = "SELECT equipe.*, User.name FROM EQUIPE LEFT JOIN USER ON EQUIPE.id = USER.id_equipe";

        Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(req);

            while (resultSet.next()) {
                int idEquipe = resultSet.getInt("id");
                String nom = resultSet.getString("nom");
                String image = resultSet.getString("image");
                Date date = resultSet.getDate("dateCreation");

                Equipe equipe = new Equipe();

                equipe.setId(idEquipe);
                if(equipeList.contains(equipe))
                {
                    String userName = resultSet.getString("name");
                    if (userName != null) {
                        User user = new User();
                        user.setName(userName);
                        int index= equipeList.indexOf(equipe);
                               equipeList.get(index).getJouers().add(user);
                    }

                }else{
                    equipe.setNom(nom);
                    equipe.setImage(image);
                    equipe.setDateCreation(date);

                    String userName = resultSet.getString("name");
                    if (userName != null) {
                        User user = new User();
                        user.setName(userName);
                        equipe.getJouers().add(user);
                    }
                    equipeList.add(equipe);


                }

            }


        return equipeList;
    }

    public List<Equipe> searchEquipes(String searchTerm) throws SQLException {
        String query = "SELECT * FROM equipe WHERE nom LIKE ? OR dateCreation LIKE ? ";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, "%" + searchTerm + "%");
            statement.setString(2, "%" + searchTerm + "%");
            ResultSet resultSet = statement.executeQuery();
            return createEquipeListFromResultSet(resultSet);
        }
    }

    private List<Equipe> createEquipeListFromResultSet(ResultSet resultSet) throws SQLException {
        List<Equipe> equipes = new ArrayList<>();
        while (resultSet.next()) {
            // Create Equipe objects from the ResultSet rows
            Equipe equipe = createEquipeFromResultSet(resultSet);
            equipes.add(equipe);
        }
        return equipes;
    }




// ----------------------------------- Equipe dont existe ------------------


    public boolean teamExists(String teamName) throws SQLException {
        return getTeamByName(teamName) != null;
    }

    public Equipe getTeamByName(String teamName) throws SQLException {
        String sql = "SELECT * FROM equipe WHERE nom = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, teamName);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next() ? createEquipeFromResultSet(resultSet) : null;
            }
        }
    }

    private Equipe createEquipeFromResultSet(ResultSet resultSet) throws SQLException {
        int id = resultSet.getInt("id");
        String nom = resultSet.getString("nom");
        java.util.Date dateCreation = resultSet.getDate("dateCreation");
        String image = resultSet.getString("image");
        // Set other attributes based on your actual Equipe class
        Equipe equipe = new Equipe();
        equipe.setId(id);
        equipe.setNom(nom);
        equipe.setDateCreation(dateCreation);
        equipe.setImage(image);
        return equipe;
    }







}