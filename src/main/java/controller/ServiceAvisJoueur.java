package controller;

import entities.AvisJoueur;
import entities.User;
import esprit.project.tools.MyDB;
import service.IServiceAvisJoueur;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ServiceAvisJoueur implements IServiceAvisJoueur<AvisJoueur> {


    PreparedStatement prepare;
    Connection connection;
    private static ServiceAvisJoueur instance;
    PreparedStatement preparedStatement;

    public ServiceAvisJoueur() {
        connection = MyDB.getInsatnce().getConnection();

    }

    public static ServiceAvisJoueur getInstance() {
        if (instance == null) {
            instance = new ServiceAvisJoueur();
        }
        return instance;
    }
    @Override
    public void ajouter(AvisJoueur av, User us) throws SQLException {
        String req = "INSERT INTO AvisJoueur ( commentaire, note, idJoueur) VALUES (?, ?, ?)";
        PreparedStatement ps = connection.prepareStatement(req, Statement.RETURN_GENERATED_KEYS);

        ps.setString(1, av.getCommentaire());
        ps.setFloat(2, av.getNote());
        ps.setInt(3, us.getId());

        ps.executeUpdate();

        ResultSet generatedKeys = ps.getGeneratedKeys();

        if (generatedKeys.next()) {

            int autoGeneratedID = generatedKeys.getInt(1);

            av.setIdAvis(autoGeneratedID);

            av.setUser(us);


        }
    }

    @Override
    public void modifier(int id, AvisJoueur avisModifie, int idJoueur) throws SQLException {
        String req = "UPDATE AvisJoueur SET commentaire=?, note=? WHERE idAvis=?";
        PreparedStatement ps = connection.prepareStatement(req);

        ps.setString(1, avisModifie.getCommentaire());
        ps.setFloat(2, avisModifie.getNote());
        ps.setInt(3, id);

        ps.executeUpdate();
    }

    @Override
    public void supprimer(int id) throws SQLException {
        String req = "DELETE FROM AvisJoueur WHERE idAvis=?";
        PreparedStatement ps = connection.prepareStatement(req);

        ps.setInt(1, id);

        ps.executeUpdate();
    }




    @Override
    public boolean existeAvis(int id) throws SQLException {
        String req = "SELECT COUNT(*) FROM AvisJoueur WHERE idAvis=?";
        try (PreparedStatement ps = connection.prepareStatement(req)) {
            ps.setInt(1, id);
            try (ResultSet resultSet = ps.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }

    @Override
    public List<AvisJoueur> recuperer() throws SQLException {
        List<AvisJoueur> avisList = new ArrayList<>();
        String req = "SELECT AvisJoueur.*, User.name FROM AvisJoueur JOIN User ON AvisJoueur.idJoueur = User.id";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(req)) {

            while (resultSet.next()) {
                int idAvis = resultSet.getInt("idAvis");
                String commentaire = resultSet.getString("commentaire");
                float note = resultSet.getFloat("note");
                int idJoueur = resultSet.getInt("idJoueur");
                String nomJoueur = resultSet.getString("name");

                AvisJoueur avis = new AvisJoueur();
                avis.setIdAvis(idAvis);
                avis.setCommentaire(commentaire);
                avis.setNote(note);

                User user = new User();
                user.setId(idJoueur);
                user.setName(nomJoueur);
                avis.setUser(user);

                avisList.add(avis);
            }
        }
        return avisList;
    }


}
// new cid 